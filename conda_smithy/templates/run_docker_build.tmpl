#!/usr/bin/env bash

# PLEASE NOTE: This script has been automatically generated by conda-smithy. Any changes here
# will be lost next time ``conda smithy rerender`` is run. If you would like to make permanent
# changes to this script, consider a proposal to conda-smithy so that other feedstocks can also
# benefit from the improvement.

FEEDSTOCK_ROOT=$(cd "$(dirname "$0")/.."; pwd;)
RECIPE_ROOT=$FEEDSTOCK_ROOT/{{ recipe_dir }}

docker info

config=$(cat <<CONDARC

channels:
{%- for channel in channels.get('sources', []) %}
 - {{ channel }}
{%- endfor %}

conda-build:
 root-dir: /feedstock_root/build_artefacts

show_channel_urls: true

CONDARC
)

ARTEFACTS="$FEEDSTOCK_ROOT/build_artefacts"

test -d "$ARTEFACTS" || mkdir "$ARTEFACTS"
DONE_CANARY="$ARTEFACTS/conda-forge-build-done"
rm -f "$DONE_CANARY"

cat << EOF > "$FEEDSTOCK_ROOT/ci_support/build.sh"

export PYTHONUNBUFFERED=1

echo "$config" > ~/.condarc
# A lock sometimes occurs with incomplete builds. The lock file is stored in build_artefacts.
conda clean --lock

conda install --yes --quiet conda-forge-build-setup
{% if build_setup -%}
{{ build_setup }}{% endif -%}

{%- block build %}
conda build /recipe_root --quiet || exit 1
{%- endblock -%}

# signal build-done with a file to protect against
# an early exit with status=0 appearing to have succeeded
touch /feedstock_root/build_artefacts/conda-forge-build-done
EOF

# Create and run the container in two comamnds,
# so we have a handle on the container ID
VOLUMES="-v ${RECIPE_ROOT}:/recipe_root \
         -v ${FEEDSTOCK_ROOT}:/feedstock_root"

CONTAINER=$(docker create -t \
           $VOLUMES \
           {{ docker.image }} \
           {{ docker.command }} /feedstock_root/ci_support/build.sh || exit $?)

# build
docker start -i $CONTAINER || exit 1
test -f "$DONE_CANARY" || exit 1
rm -f "$DONE_CANARY"

# commit, so we can run upload in the same environment
IMAGE=$(docker commit $CONTAINER || exit 1)

# upload with the token passed through stdin
# FIXME: Should this run if there is no token?
cat << EOF | docker run --rm -i \
    $VOLUMES \
    $IMAGE \
    {{ docker.command }} || exit $?

export BINSTAR_TOKEN=${BINSTAR_TOKEN}

{%- block test_and_upload %}
{%- for owner, channel in channels['targets'] %}
{{ upload_script }} /recipe_root {{ owner }} --channel={{ channel }} || exit 1
{%- endfor -%}
{%- endblock %}

# check that the end of the script was reached
touch /feedstock_root/build_artefacts/conda-forge-build-done
EOF

test -f "$DONE_CANARY" || exit 1
# everything succeeded, remove our container and image
docker rm -f "$CONTAINER"
docker rmi "$IMAGE"

echo "done"
